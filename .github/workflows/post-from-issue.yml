name: post from issue
on:
  issues:
    types: [opened, edited, labeled]
permissions:
  contents: write
  issues: read
jobs:
  publish:
    if: contains(toJson(github.event.issue.labels), "\"post\"")
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // derive title/slug
            let title = issue.title.replace(/^post:\s*/i,'').trim();
            if (!title) title = "Untitled";
            const slug = title.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'');

            // very simple HTML from issue body (kept safe)
            const escape = s => s.replace(/[&<>]/g,c=>({ "&":"&amp;","<":"&lt;",">":"&gt;" }[c]));
            const bodyHtml = "<pre>"+escape(issue.body||"").trim()+"</pre>";

            const html = `<!doctype html><meta charset="utf-8"><title>${title} • Echo</title>
<link rel="canonical" href="./${slug}.html">
<style>body{font-family:system-ui;margin:2rem auto;max-width:850px;line-height:1.55} pre{white-space:pre-wrap;overflow-wrap:anywhere;padding:12px;border:1px solid #ddd;border-radius:8px;background:#f7f7f7}</style>
<h1>${title}</h1>
${bodyHtml}
<hr><p style="opacity:.7">Published via Issue → Post.</p>`;

            const pathPost = `posts/${slug}.html`;
            const pathList = `posts.json`;

            // helper: get file (or null)
            async function getFile(path){
              try {
                const r = await github.rest.repos.getContent({owner,repo,path});
                return r.data;
              } catch (e) { return null }
            }
            // write/update file
            async function putFile(path, content, sha, msg){
              return await github.rest.repos.createOrUpdateFileContents({
                owner, repo, path, message: msg,
                content: Buffer.from(content,'utf8').toString('base64'),
                sha
              });
            }

            // write post
            const existing = await getFile(pathPost);
            await putFile(pathPost, html, existing?.sha, `Post from issue #${issue.number}: ${title}`);

            // update posts.json
            let posts = [];
            const list = await getFile(pathList);
            if (list) {
              const txt = Buffer.from(list.content, list.encoding).toString('utf8');
              try { posts = JSON.parse(txt) } catch {}
            }
            if (!posts.find(p => p.slug===slug)) {
              posts.push({ title, slug, date: new Date().toISOString().slice(0,10) });
            }
            await putFile(pathList, JSON.stringify(posts, null, 2), list?.sha, `Update posts.json for ${title}`);