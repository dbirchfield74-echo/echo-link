name: quote to proposal page
on:
  issues:
    types: [opened, edited, labeled]
permissions:
  contents: write
  issues: write
jobs:
  build:
    if: contains(toJson(github.event.issue.labels), "\"quote\"")
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const issue   = context.payload.issue;
            const owner   = context.repo.owner;
            const repo    = context.repo.repo;
            const number  = issue.number;
            const bodyMd  = issue.body || "";

            // helpers
            const getSection = (label) => {
              const re = new RegExp(`###\\s*${label}\\s*\\n([\\s\\S]*?)(\\n###|$)`,'i');
              const m = re.exec(bodyMd);
              return (m ? m[1].trim() : "");
            };
            const esc = (s) => (s||"").replace(/[&<>]/g,c=>({ "&":"&amp;","<":"&lt;",">":"&gt;" }[c]));

            const name    = getSection("Your name");
            const email   = getSection("Email");
            const budget  = getSection("Budget");
            const details = getSection("Project details");

            // derive title/slug
            let title = issue.title.replace(/^quote:\\s*/i,'').trim();
            if (!title) title = `Quote #${number}`;
            const slug  = `quote-${number}`;
            const file  = `${slug}.html`;
            const date  = new Date().toISOString().slice(0,10);
            const base  = "https://dbirchfield74-echo.github.io/echo-link";

            // proposal HTML
            const html = `<!doctype html><meta charset="utf-8"><title>${esc(title)} • Echo</title>
<link rel="stylesheet" href="../assets/css/site.css">
<style>
.box{border:1px solid #223344;border-radius:12px;padding:14px;margin:10px 0;background:#0f141b}
.muted{color:#9fb0c3}
.print{float:right}
@media print {.print{display:none}}
</style>
<body>
<nav><a href="../index.html">Echo</a><a href="../services.html">Services</a><a href="../contact.html">Contact</a><a href="../pricing.html">Pricing</a></nav>
<div class="wrap">
  <h1>${esc(title)}</h1>
  <a class="btn outline print" href="#" onclick="window.print()">Print / Save PDF</a>
  <div class="box"><strong>Date:</strong> ${date} &nbsp; <span class="muted">Issue #${number}</span></div>
  <div class="box"><strong>Client:</strong> ${esc(name)||"—"} &nbsp; <strong>Email:</strong> ${esc(email)||"—"} &nbsp; <strong>Budget:</strong> ${esc(budget)||"—"}</div>
  <h2>Details</h2>
  <div class="box">${esc(details).replace(/\\n/g,'<br>')||"—"}</div>
  <h2>Packages</h2>
  <div class="grid">
    <div class="card"><h3>Starter • $0</h3><p class="small">Pages site, intake, SEO.</p></div>
    <div class="card"><h3>Ops Mini • $199</h3><p class="small">Custom landing + routing.</p></div>
    <div class="card"><h3>Ops Pro • $499</h3><p class="small">Automations + content pipeline.</p></div>
  </div>
  <p class="small muted">Public link: ${base}/proposals/${file}</p>
</div>
</body>`;

            // get current file (for sha)
            async function getFile(path){
              try{ const r = await github.rest.repos.getContent({owner,repo,path}); return r.data } catch{ return null }
            }
            async function putFile(path, content, sha, msg){
              return await github.rest.repos.createOrUpdateFileContents({
                owner, repo, path, message: msg,
                content: Buffer.from(content,'utf8').toString('base64'),
                sha
              });
            }

            // write proposal page
            const postPath = `proposals/${file}`;
            const existing = await getFile(postPath);
            await putFile(postPath, html, existing?.sha, `proposal: ${title} (#${number})`);

            // update proposals/index.json listing
            const listPath = `proposals/index.json`;
            let list = [];
            const listData = await getFile(listPath);
            if (listData){
              try{ list = JSON.parse(Buffer.from(listData.content, listData.encoding).toString('utf8')) }catch{}
            }
            const entry = { title, file, date };
            if (!list.find(x => x.file === file)) list.push(entry);
            await putFile(listPath, JSON.stringify(list, null, 2), listData?.sha, `index: add ${file}`);

            // comment back with link
            const url = `${base}/proposals/${file}`;
            await github.rest.issues.createComment({owner, repo, issue_number: number, body: `Proposal page published: ${url}`});