name: weekly autopost
on:
  schedule:
    - cron: "30 15 * * 1"  # Mondays 15:30 UTC
permissions:
  contents: write
  issues: write
jobs:
  autopost:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // find oldest open issue with label "post"
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: 'post', per_page: 100, sort: 'created', direction: 'asc'
            });
            if (!issues.length) {
              core.info('No post-labeled issues to publish.'); return;
            }
            const issue = issues[0];

            let title = issue.title.replace(/^post:\s*/i,'').trim() || 'Untitled';
            const slug = title.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'');
            const escape = s => (s||'').replace(/[&<>]/g,c=>({ "&":"&amp;","<":"&lt;",">":"&gt;" }[c]));
            const bodyHtml = "<pre>"+escape(issue.body).trim()+"</pre>";
            const html = `<!doctype html><meta charset="utf-8"><title>${title} â€¢ Echo</title>
<link rel="canonical" href="./${slug}.html">
<style>body{font-family:system-ui;margin:2rem auto;max-width:850px;line-height:1.55} pre{white-space:pre-wrap;overflow-wrap:anywhere;padding:12px;border:1px solid #ddd;border-radius:8px;background:#f7f7f7}</style>
<h1>${title}</h1>
${bodyHtml}
<hr><p style="opacity:.7">Published via Weekly Autopost.</p>`;

            async function get(path){
              try {
                const r = await github.rest.repos.getContent({owner,repo,path});
                return r.data;
              } catch(e){ return null; }
            }
            async function put(path, content, sha, msg){
              return await github.rest.repos.createOrUpdateFileContents({
                owner, repo, path, message: msg,
                content: Buffer.from(content,'utf8').toString('base64'),
                sha
              });
            }

            const pathPost = `posts/${slug}.html`;
            const pathList = `posts.json`;

            const ex = await get(pathPost);
            await put(pathPost, html, ex?.sha, `Autopost from issue #${issue.number}: ${title}`);

            let posts = [];
            const list = await get(pathList);
            if (list) {
              const txt = Buffer.from(list.content, list.encoding).toString('utf8');
              try { posts = JSON.parse(txt) } catch {}
            }
            if (!posts.find(p=>p.slug===slug)){
              posts.push({ title, slug, date: new Date().toISOString().slice(0,10) });
            }
            await put(pathList, JSON.stringify(posts,null,2), list?.sha, `Update posts.json for ${title}`);

            const url = `https://`+owner+`.github.io/`+repo+`/posts/`+slug+`.html`;
            await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body: `Published: ${url}` });
            await github.rest.issues.update({ owner, repo, issue_number: issue.number, state: 'closed' });